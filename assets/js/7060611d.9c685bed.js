"use strict";(self.webpackChunkschematix_documentation=self.webpackChunkschematix_documentation||[]).push([[5251],{3905:function(t,e,a){a.d(e,{kt:function(){return p}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),d=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),p=d(a),c=r,h=p["".concat(s,".").concat(c)]||p[c]||m[c]||i;return a?n.createElement(h,l(l({ref:e},u),{},{components:a})):n.createElement(h,l({ref:e},u))}));function p(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4921:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return d},assets:function(){return m},toc:function(){return u},default:function(){return c}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={id:"validating-csv-files-using-json-schema",title:"Validating CSV files using JSON Schemas",author:"Erik Pragt",author_title:"Schematix Developer",author_url:"https://github.com/schematix-net",author_image_url:"https://avatars.githubusercontent.com/u/56183148?v=4",tags:["validation","csv","json schema"]},s=void 0,d={permalink:"/blog/2021/11/17/validating-csv-files-with-json-schemas",source:"@site/blog/2021-11-17-validating-csv-files-with-json-schemas.md",title:"Validating CSV files using JSON Schemas",description:"CSV files are an often used medium for transferring data between systems. Be it medical data, financial data, or",date:"2021-11-17T00:00:00.000Z",formattedDate:"November 17, 2021",tags:[{label:"validation",permalink:"/blog/tags/validation"},{label:"csv",permalink:"/blog/tags/csv"},{label:"json schema",permalink:"/blog/tags/json-schema"}],readingTime:3.96,truncated:!0,authors:[{name:"Erik Pragt",title:"Schematix Developer",url:"https://github.com/schematix-net",imageURL:"https://avatars.githubusercontent.com/u/56183148?v=4"}],nextItem:{title:"Welcome",permalink:"/blog/2019/05/30/welcome"}},m={authorsImageUrls:[void 0]},u=[{value:"Generate random data",id:"generate-random-data",children:[],level:3},{value:"Validating CSV data",id:"validating-csv-data",children:[],level:3},{value:"Conclusion",id:"conclusion",children:[],level:2}],p={toc:u};function c(t){var e=t.components,a=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"CSV files are an often used medium for transferring data between systems. Be it medical data, financial data, or\nany other type of data, CSV files are often the exit or entry point of any IT system. But whenever the data\ngets ingested, what options do we have to verify the validity of our data? This blogpost dives in how to validate\nCSV data using standard JSON Schemas."),(0,i.kt)("p",null,"JSON Schemas, as the name implies, are schemas used to validate JSON structures. However, CSV files (with a bit of\nimagination) can resemble JSON structures quite well, and as such, a combination of CSV files and JSON Schemas seems\na straightforward one. "),(0,i.kt)("p",null,"JSON Schemas offer a wide range of validation options. For instance, JSON Schemas offer data types, such as Strings,\nNumbers, and Booleans as standard data types. Besides that, there are a wide range of validation options, ranging\nfrom length checking, maximum values, to more complex validations of using Regular Expressions or custom datatypes.\nAll in all, JSON Schemas offer a very complete set of validations to validate most data."),(0,i.kt)("h3",{id:"generate-random-data"},"Generate random data"),(0,i.kt)("p",null,"To validate data, we start by defining a Schema. An easy way to create a Schema is by using ",(0,i.kt)("inlineCode",{parentName:"p"},"schematix init"),", which\nwe can invoke by using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker run -ti schematix/cli:latest init\n")),(0,i.kt)("p",null,"This will generate a starting point for our Schema, and highlights some of the options Schematix provides. To make\nthings a bit simpler, we limit the schema to only 3 properties, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema" : "http://json-schema.org/draft-07/schema#",\n  "$id" : "https://schema.schematix.net/data-gen/simple_types.json",\n  "type" : "object",\n  "title" : "Initializer template",\n  "description" : "Initializer example template",\n  "properties" : {\n    "author" : {\n      "type" : "string"\n    },\n    "book title" : {\n      "type" : "string"\n    },\n    "isbn10" : {\n      "type" : "string",\n      "maxLength" : 10\n    }\n  },\n  "required" : [ "author" ]\n}\n')),(0,i.kt)("p",null,"So, now we have a simple JSON Schema which we can use to validate some input data.\nSave the above file to a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"book.schema.json")),(0,i.kt)("p",null,"We could create some data to validate by hand, but it's easier to have Schematix validate a few records for us.\nWe can do so using the ",(0,i.kt)("inlineCode",{parentName:"p"},"generate-data")," command, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker run -ti -v ${PWD}:/tmp schematix/cli generate-data /tmp/book.schema.json --output=/tmp/books.csv\n")),(0,i.kt)("p",null,"This will produce the following result:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"author"),(0,i.kt)("th",{parentName:"tr",align:null},"book title"),(0,i.kt)("th",{parentName:"tr",align:null},"isbn10"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Shelli Kreiger"),(0,i.kt)("td",{parentName:"tr",align:null},"A Catskill Eagle"),(0,i.kt)("td",{parentName:"tr",align:null},"0733564410")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Kling Group"),(0,i.kt)("td",{parentName:"tr",align:null},"Blue Remembered Earth"),(0,i.kt)("td",{parentName:"tr",align:null},"1595015485")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'"Funk, Hirthe and Daniel"'),(0,i.kt)("td",{parentName:"tr",align:null},"Ring of Bright Water"),(0,i.kt)("td",{parentName:"tr",align:null},"0473680718")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'"Buckridge, Padberg and Abernathy"'),(0,i.kt)("td",{parentName:"tr",align:null},"Little Hands Clapping"),(0,i.kt)("td",{parentName:"tr",align:null},"165077253X")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Eugena Stiedemann"),(0,i.kt)("td",{parentName:"tr",align:null},"Fran\xe7oise Sagan"),(0,i.kt)("td",{parentName:"tr",align:null},"0985914041")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Tami Carroll MD"),(0,i.kt)("td",{parentName:"tr",align:null},"Nine Coaches Waiting"),(0,i.kt)("td",{parentName:"tr",align:null},"196552673X")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'"Swaniawski, Stiedemann and Boehm"'),(0,i.kt)("td",{parentName:"tr",align:null},"Frequent Hearses"),(0,i.kt)("td",{parentName:"tr",align:null},"1726121577")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Altenwerth-Champlin"),(0,i.kt)("td",{parentName:"tr",align:null},"Tender Is the Night"),(0,i.kt)("td",{parentName:"tr",align:null},"1337231479")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Mr. Gaye Russel"),(0,i.kt)("td",{parentName:"tr",align:null},"Consider Phlebas"),(0,i.kt)("td",{parentName:"tr",align:null},"0033802831")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Dr. Zonia DuBuque"),(0,i.kt)("td",{parentName:"tr",align:null},"The Mirror Crack'd from Side to Side"),(0,i.kt)("td",{parentName:"tr",align:null},"1650263562")))),(0,i.kt)("p",null,"As you can see in the data above, the generated data isn't some random string. Schematix comes\nwith many natural text generators, and attempts to find a suitable match based on the heurisics\nin the schema. This makes working with data far more pleasant than just generating a text like\n",(0,i.kt)("inlineCode",{parentName:"p"},"pXOOqbkqzk"),". The posibilities of generating random data go far beyond this basic example, but it\ngives bit of an indication of what's possible."),(0,i.kt)("h3",{id:"validating-csv-data"},"Validating CSV data"),(0,i.kt)("p",null,"Now, the last part of our setup is to actually start validating the CSV data. If we would validate\nthe data as is, there wouldn't be any validation errors, since Schematix attempts to generate\nonly valid data, unless instructed otherwise. So, let's manually change some of the data."),(0,i.kt)("p",null,"When looking at the schema, we see that we have a maxmum length for the ISBN 10 identifier. We\ncan put an invalid value in the data by exceeding the length of 10, so let's do that, and change the\nlast number in the CSV file like this:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"author"),(0,i.kt)("th",{parentName:"tr",align:null},"book title"),(0,i.kt)("th",{parentName:"tr",align:null},"isbn10"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Dr. Zonia DuBuque"),(0,i.kt)("td",{parentName:"tr",align:null},"The Mirror Crack'd from Side to Side"),(0,i.kt)("td",{parentName:"tr",align:null},"1650263562",(0,i.kt)("strong",{parentName:"td"},"XXX"))))),(0,i.kt)("p",null,"Now that we have invalid data in the CSV file, let's validate it. You can do so with the following command,\nwhich is very similar to the command to generate data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker run -ti -v ${PWD}:/tmp schematix/cli validate  /tmp/books.csv /tmp/book.schema.json --header=1\n")),(0,i.kt)("p",null,"Note that we're supplying ",(0,i.kt)("inlineCode",{parentName:"p"},"header=1")," parameter, to skip the first line of the CSV file, which contains the header."),(0,i.kt)("p",null,"The validation result will now look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Validation FAILED with 1 error:\n- line 20:<isbn10> String length 13 is greater than maxLength 10\n")),(0,i.kt)("p",null,"And we've validated our first CSV file using a JSON Schema!"),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"The above gave a small introduction in how to improve the quality of data coming out or going into\na system by providing the option to easily validate the data. If you need to know more,\nplease ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/overview"},"check out the documentation"),", or contact us!"))}c.isMDXComponent=!0}}]);