"use strict";(self.webpackChunkschematix_documentation=self.webpackChunkschematix_documentation||[]).push([[876],{3905:function(e,t,a){a.d(t,{kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||l;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4736:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],o={id:"data-generation",title:"Data Generation",sidebar_label:"Data Generation"},s=void 0,p={unversionedId:"modules/data-generation",id:"modules/data-generation",isDocsHomePage:!1,title:"Data Generation",description:"Data Generation",source:"@site/docs/modules/data-generation.md",sourceDirName:"modules",slug:"/modules/data-generation",permalink:"/docs/modules/data-generation",editUrl:"https://github.com/schematix-net/schematix-documentation/edit/master/website/docs/modules/data-generation.md",tags:[],version:"current",frontMatter:{id:"data-generation",title:"Data Generation",sidebar_label:"Data Generation"},sidebar:"someSidebar",previous:{title:"Validation",permalink:"/docs/modules/validation"},next:{title:"Code Generation",permalink:"/docs/modules/code-generation"}},d=[{value:"Data Generation",id:"data-generation",children:[],level:2},{value:"Overview",id:"overview",children:[],level:2},{value:"Basic usage",id:"basic-usage",children:[],level:2},{value:"Generation Strategies",id:"generation-strategies",children:[{value:"Natural",id:"natural",children:[],level:3},{value:"Schema Based",id:"schema-based",children:[],level:3},{value:"Example Based",id:"example-based",children:[],level:3},{value:"Override Strategy",id:"override-strategy",children:[],level:3}],level:2},{value:"Advanced usage",id:"advanced-usage",children:[{value:"Decimal precision",id:"decimal-precision",children:[],level:3},{value:"Locale usage",id:"locale-usage",children:[],level:3}],level:2},{value:"Full example",id:"full-example",children:[],level:2},{value:"Incorrect data generation",id:"incorrect-data-generation",children:[],level:2}],m={toc:d};function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"data-generation"},"Data Generation"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Work with limitless Personally Identifiable Information (PII) in the most secure way.")),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"In the world of Data exchange, having the data to test, experiment, explorer is a must have. But dealing\nwith data brings changellenges, such as the availability, correctness and privacy aspects aspects of data."),(0,l.kt)("p",null,"Schematix Data Generation addresses those issues by providing the capability to generate real looking data\naccording to well defined rules. This prevents leaking privacy related data, or having to spend large\nquantities of time on the collection and filtering of data. "),(0,l.kt)("p",null,"Within seconds, Schematix can generate the right amount of data in exactly the format you want.  "),(0,l.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"./schematix generate-data example.schema.json\n")),(0,l.kt)("h2",{id:"generation-strategies"},"Generation Strategies"),(0,l.kt)("p",null,"Schematix has several data generation strategies. When generating data for properties defined in the schema, the sequence\nof generation strategies determines which strategy has preference over the next."),(0,l.kt)("p",null,"The default order of strategies defined are the following:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Override Strategy"),(0,l.kt)("li",{parentName:"ol"},"Natural Strategy"),(0,l.kt)("li",{parentName:"ol"},"Schema Strategy  ")),(0,l.kt)("p",null,"This means, that when generating data for a property defined in the schema, Schematix will first look at the Override\nStrategy, followed by the Natural Strategy, and then the Schema Strategy."),(0,l.kt)("p",null,"Besides this, there are several optional strategies, which won't be applied unless specifically defined."),(0,l.kt)("h3",{id:"natural"},"Natural"),(0,l.kt)("p",null,"The Natural Strategy is used to generate real looking data, such as phone numbers, names, credit cards, and much more."),(0,l.kt)("p",null,"The Natural Strategy determines the strategy to use based on the property name, and will try to find a generator\nbased on that name. For example, when a property has been defined with the name ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName"),", a random first name\nwill be generated. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Input")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "$id": "https://schema.schematix.net/documentation/simple-types.json",\n  "type": "object",\n  "properties": {\n    "firstName": {\n      "type": "string"\n    },\n    "lastName": {\n      "type": "string"\n    },\n    "phoneNumber": {\n      "type": "string"\n    },\n    "birthDay": {\n      "type": "string"\n    }\n  }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generated data")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"lastName"),(0,l.kt)("th",{parentName:"tr",align:null},"phoneNumber"),(0,l.kt)("th",{parentName:"tr",align:null},"birthDay"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Riley"),(0,l.kt)("td",{parentName:"tr",align:null},"Champlin"),(0,l.kt)("td",{parentName:"tr",align:null},"+61 412 549 144"),(0,l.kt)("td",{parentName:"tr",align:null},"Thu Jul 17 21:29:40 AEST 1958")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Addison"),(0,l.kt)("td",{parentName:"tr",align:null},"Paterson"),(0,l.kt)("td",{parentName:"tr",align:null},"+61 450 817 751"),(0,l.kt)("td",{parentName:"tr",align:null},"Thu Oct 09 18:36:31 AEST 1986")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Anthony"),(0,l.kt)("td",{parentName:"tr",align:null},"Heathcote"),(0,l.kt)("td",{parentName:"tr",align:null},"+61 478 733 151"),(0,l.kt)("td",{parentName:"tr",align:null},"Sun Dec 24 11:45:41 AEDT 1972")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Jack"),(0,l.kt)("td",{parentName:"tr",align:null},"Murphy"),(0,l.kt)("td",{parentName:"tr",align:null},"+61 479 063 717"),(0,l.kt)("td",{parentName:"tr",align:null},"Mon Sep 10 14:04:43 AEST 1984")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"...")))),(0,l.kt)("h3",{id:"schema-based"},"Schema Based"),(0,l.kt)("p",null,"Schema looks at the schema."),(0,l.kt)("h3",{id:"example-based"},"Example Based"),(0,l.kt)("p",null,"The example based strategy looks at the defined examples, and picks one from them. This can be used\nwhen you want to have more real like data, and can't use an ",(0,l.kt)("inlineCode",{parentName:"p"},"enum")," for the schema (for example,\nbecause the number of possible values is too large or undefined) "),(0,l.kt)("p",null,"To define an example, you can define a property with the following syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"name": {\n  "x-schematix" : {\n    "generation-strategy": "example"\n  },\n  "type": "string",\n  "examples": ["duck", "goose"]\n},\n')),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"example")," strategy will only be used when it's explicitly defined in an override, either using ",(0,l.kt)("inlineCode",{parentName:"p"},"x-schematix")," or\nby setting the ",(0,l.kt)("inlineCode",{parentName:"p"},"generation-strategy")," globally."))),(0,l.kt)("h3",{id:"override-strategy"},"Override Strategy"),(0,l.kt)("p",null,"To have more control over which generation strategy Schematix uses, it's possible to override the strategy\nbeing used. "),(0,l.kt)("p",null,"To override the strategy, you can set the custom property ",(0,l.kt)("inlineCode",{parentName:"p"},"generation-strategy")," (part of the ",(0,l.kt)("inlineCode",{parentName:"p"},"x-schematix")," property) in the schema, which will\ninstruct the Data Generation module to prefer an alternative generation strategy. The possible values of\n",(0,l.kt)("inlineCode",{parentName:"p"},"generation-strategy")," are: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"natural")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"example")," ")),(0,l.kt)("h2",{id:"advanced-usage"},"Advanced usage"),(0,l.kt)("p",null,"This section covers the more advanced topic."),(0,l.kt)("h3",{id:"decimal-precision"},"Decimal precision"),(0,l.kt)("p",null,"By default, Schematix uses two decimals for floating point numbers when generating data.\nHowever, it's possible to customise this, either on a property level or on a global level (ie. for all decimal number in the schema)"),(0,l.kt)("p",null,"To specify the number of decimal, you can adjust the custom property ",(0,l.kt)("inlineCode",{parentName:"p"},"scale")," (part of the ",(0,l.kt)("inlineCode",{parentName:"p"},"x-schematix")," property) in the schema, like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "$id": "https://schema.schematix.net/data-gen/simple_types.json",\n  "type": "object",\n  "properties": {\n    "amount": {\n      "x-schematix" : {\n        "scale": "5"\n      },\n      "type": "number"\n    }\n  }\n}\n')),(0,l.kt)("p",null,"This will generate values with a precision of 5, for example: ",(0,l.kt)("inlineCode",{parentName:"p"},"100.43903"),"."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"scale")," option can also be specified globally via the command line, by providing the ",(0,l.kt)("inlineCode",{parentName:"p"},"--scale")," argument, for example ",(0,l.kt)("inlineCode",{parentName:"p"},"--scale=3"),"."),(0,l.kt)("h3",{id:"locale-usage"},"Locale usage"),(0,l.kt)("p",null,"When generating data, Schematix implies the data should be created using a US locale.\nHowever, it's possible to override this by providing a language using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--language")," parameter."),(0,l.kt)("p",null,"For example, when using the Dutch locale (nl), Schematix will generate Dutch names and Dutch phone numbers:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"./schematix generate-data example.schema.json --language=nl\n")),(0,l.kt)("p",null,"Results in:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"lastName"),(0,l.kt)("th",{parentName:"tr",align:null},"phoneNumber"),(0,l.kt)("th",{parentName:"tr",align:null},"birthDay"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Purdey"),(0,l.kt)("td",{parentName:"tr",align:null},"Harmans"),(0,l.kt)("td",{parentName:"tr",align:null},"(9096) 625498"),(0,l.kt)("td",{parentName:"tr",align:null},"Thu May 01 20:50:29 AEST 1980")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Xenja"),(0,l.kt)("td",{parentName:"tr",align:null},"Oosterveen"),(0,l.kt)("td",{parentName:"tr",align:null},"0685725846"),(0,l.kt)("td",{parentName:"tr",align:null},"Sun Aug 04 17:13:04 AEST 1985")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Cl\xe9ment"),(0,l.kt)("td",{parentName:"tr",align:null},"Groothuizen"),(0,l.kt)("td",{parentName:"tr",align:null},"06 5644 5731"),(0,l.kt)("td",{parentName:"tr",align:null},"Fri Dec 09 13:36:53 AEDT 1977")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Tuulia"),(0,l.kt)("td",{parentName:"tr",align:null},"Gr\xe4per"),(0,l.kt)("td",{parentName:"tr",align:null},"9717933259"),(0,l.kt)("td",{parentName:"tr",align:null},"Fri Dec 24 08:16:30 AEST 1965")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Lynn"),(0,l.kt)("td",{parentName:"tr",align:null},"Criens"),(0,l.kt)("td",{parentName:"tr",align:null},"0679033457"),(0,l.kt)("td",{parentName:"tr",align:null},"Thu Jul 02 11:23:27 AEST 1998")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Kenosha"),(0,l.kt)("td",{parentName:"tr",align:null},"Eberhard"),(0,l.kt)("td",{parentName:"tr",align:null},"0688081463"),(0,l.kt)("td",{parentName:"tr",align:null},"Fri Nov 26 15:39:50 AEST 1965")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"...")))),(0,l.kt)("h2",{id:"full-example"},"Full example"),(0,l.kt)("p",null,"This example demonstrates most of capabilities of Schematix data generation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "$id": "https://schema.schematix.net/data-gen/simple_types.json",\n  "type": "object",\n  "properties": {\n    "age": {\n      "x-schematix" : {\n        "generation-strategy": "natural"\n      },\n      "type": "string"\n    },\n    "name": {\n      "x-schematix" : {\n        "generation-strategy": "schema"\n      },\n      "type": "string",\n      "enum": ["duck", "goose"]\n    },\n    "breed": {\n      "type": "string",\n      "x-schematix" : {\n        "generation-strategy": "example",\n        "scale" : 1\n      },\n      "pattern": "[a-z]+",\n      "examples": [\n        "bulldog",\n        "pug",\n        "poodle"\n      ]\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"incorrect-data-generation"},"Incorrect data generation"),(0,l.kt)("p",null,"Sometimes you may want to generate incorrect data, for example, for testing purposes. You can do that using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"./schematix generate-data example.schema.json --error-rate=5\n")),(0,l.kt)("p",null,"This will generate 95% correct data and 5% incorrect data."))}u.isMDXComponent=!0}}]);