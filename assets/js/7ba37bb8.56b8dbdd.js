"use strict";(self.webpackChunkschematix_documentation=self.webpackChunkschematix_documentation||[]).push([[3031],{3905:function(e,t,n){n.d(t,{kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,d=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?a.createElement(d,o(o({ref:t},m),{},{components:n})):a.createElement(d,o({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9918:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"tools",title:"Tools",sidebar_label:"Tools"},s=void 0,c={unversionedId:"modules/tools",id:"modules/tools",isDocsHomePage:!1,title:"Tools",description:"Schematix Initializer",source:"@site/docs/modules/tools.md",sourceDirName:"modules",slug:"/modules/tools",permalink:"/docs/modules/tools",editUrl:"https://github.com/schematix-net/schematix-documentation/edit/master/website/docs/modules/tools.md",tags:[],version:"current",frontMatter:{id:"tools",title:"Tools",sidebar_label:"Tools"},sidebar:"someSidebar",previous:{title:"Versioning",permalink:"/docs/modules/versioning"},next:{title:"AWS Glue",permalink:"/docs/integrations/aws/glue"}},p=[{value:"Schematix Initializer",id:"schematix-initializer",children:[],level:2},{value:"Generate Schema from JSON file",id:"generate-schema-from-json-file",children:[],level:2},{value:"Generate Schema from CSV file",id:"generate-schema-from-csv-file",children:[],level:2},{value:"Generate SQL from JSON Schema",id:"generate-sql-from-json-schema",children:[],level:2},{value:"Inspect fixed width lines",id:"inspect-fixed-width-lines",children:[],level:2}],m={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"schematix-initializer"},"Schematix Initializer"),(0,r.kt)("p",null,"To make it easier to get started with a Schematix Schema, you can run\nthe Schematix Initializer, which will create a basic schema for you. "),(0,r.kt)("p",null,"You can run the initializer by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./schematix init\n")),(0,r.kt)("p",null,"After that, save the resulting schema in a file of your choice, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"initializer.schema.json"),",\nand this should give a good starting point to further customize the schema."),(0,r.kt)("p",null,"If you want to initialize a new project with a list of properties, it's also possible to provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"--source"),"\nargument, which takes in a newline separated file consisting of a list of property names."),(0,r.kt)("p",null,"For example, give a file named ",(0,r.kt)("inlineCode",{parentName:"p"},"properties.csv"),", which contains the following contents:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"firstname\nlastname\nincome\n")),(0,r.kt)("p",null,"The command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./schematix init --source=properties.csv\n")),(0,r.kt)("p",null,"Will generate a new schema with the above properties in the generated schema. Note that at this moment\nit's only possible to generate a schema with a list of optional strings."),(0,r.kt)("h2",{id:"generate-schema-from-json-file"},"Generate Schema from JSON file"),(0,r.kt)("p",null,"Schematix provides an easy way to generate a schema without having to write it by hand."),(0,r.kt)("p",null,"Based on the contents a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"my-data.json")," (see below):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "transaction_date": "123",\n  "reference": "tUEJRjXA4fAYmvfR8tGcYkQ",\n  "amount": 52.70340131765968,\n  "account": "910623899"\n}\n')),(0,r.kt)("p",null,"When invoking the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./schematix generate-schema my-data.json\n")),(0,r.kt)("p",null,"Schematix will generate this schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Generated at <date> based on transaction.json",\n  "title": "transaction",\n  "type": "object",\n  "properties": {\n    "transaction_date": {\n      "type": "string"\n    },\n    "reference": {\n      "type": "string"\n    },\n    "amount": {\n      "type": "number"\n    },\n    "account": {\n      "type": "string"\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"generate-schema-from-csv-file"},"Generate Schema from CSV file"),(0,r.kt)("p",null,"Similar to generating a schema from a JSON file, you can generate a schema from a CSV file."),(0,r.kt)("p",null,"Based on the contents a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"my-data.csv")," (see below):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"transaction_date,reference,amount,account\n12,tUEJRjXA4fAYmvfR8tGcYkQ, 52.70340131765968,910623899\n")),(0,r.kt)("p",null,"When invoking the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./schematix generate-schema my-data.csv\n")),(0,r.kt)("p",null,"Schematix will generate this schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "description": "Generated at <date> based on transaction.csv",\n  "title": "transaction",\n  "type": "object",\n  "properties": {\n    "transaction_date": {\n      "type": "integer"\n    },\n    "reference": {\n      "type": "string"\n    },\n    "amount": {\n      "type": "number"\n    },\n    "account": {\n      "type": "string"\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"generate-sql-from-json-schema"},"Generate SQL from JSON Schema"),(0,r.kt)("p",null,"Schematix provides tooling to turn a JSON schema into a SQL DDL file without having to write it by hand.\nDepending on the complexity of the schema, this can save quite a bit of time."),(0,r.kt)("p",null,"To invoke the SQL generation, you can invoke the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./schematix generate-sql my.schema.json --dialect=SQLServer --output=schema.sql\n")),(0,r.kt)("p",null,"Executing the above will generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.sql")," file with both drop and create statements for the schema.\nAn example can be seen below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"drop table entity_demo;\n\ncreate table entity_demo (\n   id int identity not null,\n    name varchar(255),\n    transaction_date varchar(255),\n    amount float,\n    cards int,\n    active bit,\n    cardtype varchar(255),\n    primary key (id)\n);\n")),(0,r.kt)("p",null,"Schematix SQL generation supports many SQL dialects, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Oracle "),(0,r.kt)("li",{parentName:"ul"},"MySQL"),(0,r.kt)("li",{parentName:"ul"},"SQL Server"),(0,r.kt)("li",{parentName:"ul"},"H2")),(0,r.kt)("p",null,"For a full list of supported dialects, pleas check the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.jboss.org/hibernate/orm/3.5/javadocs/org/hibernate/dialect/package-summary.html"},"Hibernate Dialects Documentation"),"."),(0,r.kt)("h2",{id:"inspect-fixed-width-lines"},"Inspect fixed width lines"),(0,r.kt)("p",null,"Handling fixed width files is often a challenge in the way how they are formatted, and as such, it's often hard to see which field is which."),(0,r.kt)("p",null,"For example, when dealing with a text such as ",(0,r.kt)("inlineCode",{parentName:"p"},"202001101001"),", it's hard to find the significance of the fields embedded in the input string.\nHowever, using Schematix Inpect, dealing with input like this becomes much easier."),(0,r.kt)("p",null,"When involving the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./schematix inspect --mapping=my.mapping.json 202001101001\n")),(0,r.kt)("p",null,"The following output will be generated by Inspect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"date    = 20200110 \nversion = 10\nstatus  = 01\n")))}u.isMDXComponent=!0}}]);